{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Des Brennan\\\\sources\\\\commercial-tool\\\\commercial-analytical-tool\\\\client\\\\src\\\\components\\\\Analysis1.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport axios from 'axios';\nimport qs from 'qs';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as actions from '../actions';\nimport BarChart from './BarChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\nexport default function CheckboxList() {\n  _s();\n\n  const classes = useStyles();\n  var [checked, setChecked] = React.useState([0]);\n  const [labels, setLabels] = React.useState([]);\n  const [datasets, setDatasets] = React.useState([]);\n  const [dataLabels, setDatalabels] = React.useState([]);\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const onClickHandler = async () => {\n    const inverters = await axios.get('http://localhost:5001/upload/inverters').then(res => res.data);\n    setLabels(inverters);\n  };\n\n  const selectAll = () => {\n    if (checked.length - 1 < labels.length) {\n      var newChecked = [0].concat(labels);\n      setChecked(newChecked);\n    } else if (checked.length - 1 == labels.length) {\n      setChecked([0]);\n    }\n  };\n\n  const fetchDataHandler = async () => {\n    const dataPoints = await axios.get('http://localhost:5001/upload/fetchData', {\n      params: {\n        inverters: checked\n      },\n      paramsSerializer: params => {\n        return qs.stringify(params);\n      }\n    }).then(res => res.data);\n    var data = JSON.parse(dataPoints);\n    console.log(data.xVals);\n    setDatasets(data.datasets);\n    setDatalabels(data.labels);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      class: \"btn btn-success btn-block\",\n      onClick: fetchDataHandler,\n      children: \"Preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n      labels: dataLabels,\n      datasets: datasets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CheckboxList, \"HnghzlU1oJ0SXxpTH1xvVFx0Ygg=\", false, function () {\n  return [useStyles];\n});\n\n_c = CheckboxList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxList\");","map":{"version":3,"sources":["C:/Users/Des Brennan/sources/commercial-tool/commercial-analytical-tool/client/src/components/Analysis1.js"],"names":["React","makeStyles","List","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","Checkbox","IconButton","axios","qs","Container","Row","Col","actions","BarChart","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","CheckboxList","classes","checked","setChecked","useState","labels","setLabels","datasets","setDatasets","dataLabels","setDatalabels","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","onClickHandler","inverters","get","then","res","data","selectAll","length","concat","fetchDataHandler","dataPoints","params","paramsSerializer","stringify","JSON","parse","console","log","xVals"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport axios from 'axios';\r\nimport qs from 'qs'\r\n\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport * as actions from '../actions';\r\n\r\nimport BarChart from './BarChart'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport default function CheckboxList() {\r\n\r\n    const classes = useStyles();\r\n    var [checked, setChecked] = React.useState([0]);\r\n    const [labels, setLabels] = React.useState([]);\r\n    const [datasets, setDatasets] = React.useState([]);\r\n    const [dataLabels, setDatalabels] = React.useState([]);\r\n\r\n    const handleToggle = (value) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n    };\r\n\r\n    const onClickHandler = async () => {\r\n        const inverters = await axios.get('http://localhost:5001/upload/inverters').then(res => res.data);\r\n        setLabels(inverters)\r\n    }\r\n\r\n    const selectAll = () => {\r\n        if (checked.length - 1 < labels.length) {\r\n            var newChecked = [0].concat(labels)\r\n            setChecked(newChecked)\r\n        } else if (checked.length - 1 == labels.length) {\r\n            setChecked([0])\r\n        }\r\n    }\r\n\r\n    const fetchDataHandler = async () => {\r\n        const dataPoints = await axios.get('http://localhost:5001/upload/fetchData', {\r\n            params: {\r\n                inverters: checked\r\n            },\r\n            paramsSerializer: params => {\r\n                return qs.stringify(params)\r\n            }\r\n        }).then(res => res.data);\r\n\r\n        var data = JSON.parse(dataPoints)\r\n        console.log(data.xVals)\r\n        setDatasets(data.datasets)\r\n        setDatalabels(data.labels)\r\n    }\r\n\r\n    return (\r\n        <div class=\"container\">\r\n            <button type=\"button\" class=\"btn btn-success btn-block\" onClick={fetchDataHandler}>Preview</button>\r\n            <BarChart labels={dataLabels} datasets={datasets} />\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}